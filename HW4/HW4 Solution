(* ------------------------------------------------------------------------*)
(* Q 1 : Money in the bank (25 points)                                     *)
(* ------------------------------------------------------------------------*)

let new_account (p: passwd) : bank_account =
  let balance = ref 0 in
  let correct_passwd = ref p in
  let wrong_counter = ref 0 in
  {
    update_passwd = (fun (old:passwd) -> fun (neww:passwd) -> 
        if old = !correct_passwd then 
          (wrong_counter := 0;
           correct_passwd := neww)
        else (wrong_counter := !wrong_counter + 1;
              raise wrong_pass)
      );
      
    retrieve = (fun (givenp:passwd) -> fun (x:int) -> 
        if !wrong_counter >= 3 then raise too_many_attempts 
        else if givenp = !correct_passwd then
          (wrong_counter :=0;
           if x <= !balance then balance := !balance - x
           else raise no_money)
        else (wrong_counter := !wrong_counter + 1;
              if !wrong_counter > 3 then raise too_many_attempts
              else raise wrong_pass)
      );
    
    deposit = (fun (givenp:passwd) -> fun (x:int) -> 
        if !wrong_counter >= 3 then raise too_many_attempts 
        else if givenp = !correct_passwd then
          (balance := !balance + x;
           wrong_counter := 0)
        else (wrong_counter := !wrong_counter + 1;
              if(!wrong_counter > 3) then raise too_many_attempts
              else raise wrong_pass)
          
      );
    
    print_balance = (fun (givenp:passwd) -> 
        if !wrong_counter >= 3 then raise too_many_attempts 
        else if givenp = !correct_passwd then
          (wrong_counter := 0; !balance)
        else (wrong_counter := !wrong_counter + 1;
              if(!wrong_counter > 3) then raise too_many_attempts
              else raise wrong_pass) 
      ); 
  }
;;


(* ------------------------------------------------------------------------*)
(* Q 2 : Memoization (75 points)                                           *)
(* ------------------------------------------------------------------------*)

(* Q 2.1 : Counting how many function calls are made *)

let rec fib_I (n: int) : fib_result =
  raise NotImplemented
;;


(* Q 2.2 : Memoization with a global store *)

let fib_memo (n: int) : int =
  let rec fib n =
    raise NotImplemented
  in
  fib n
;;


(* Q 2.3 : General memoization function *)

let memo (f: (('a -> 'b) -> 'a -> 'b)) (stats: stats) : ('a -> 'b) =
  raise NotImplemented
;;


(* Q 2.4 : Using memo to efficiently compute the Fibonacci number *)
(* We also accept let fibM = raise NotImplemented ;; *)
let fibM (n: int) : (int * stats) =
  raise NotImplemented
;;
